if isdirectory(expand('~/.vim/bundle/vim-pathogen'))
	set rtp+=~/.vim/bundle/vim-pathogen
	execute pathogen#infect()
endif

set nocompatible
filetype plugin indent on
syntax on

"set number
"set relativenumber
set undofile
set hlsearch
set incsearch
set ignorecase
set smartcase

set showcmd
set wildmenu
set ruler

" spaces > tabs
set expandtab
set shiftwidth=4

set splitbelow
set splitright

set clipboard=unnamedplus

" set better cache dirs
set directory=~/.vim/swap
set backupdir=~/.vim/backup
set viewdir=~/.vim/view
set undodir=~/.vim/undo
set viminfo+=n~/.vim/viminfo

" " if in graphical environment, use light theme. else, use dark
" if $DISPLAY != ""
" 	set background=light
" else
" 	set background=dark
" endif
set background=dark

"let g:solarized_termcolors=256 " use if not using Solarized in terminal emulator
"let g:solarized_termtrans=1
" ignore errors, gracefully fall back
silent! colorscheme solarized

" map
let mapleader=","
map j gj
map k gk
map <C-J> <C-W><C-J>
map <C-K> <C-W><C-K>
map <C-L> <C-W><C-L>
map <C-H> <C-W><C-H>

" filetype
autocmd BufNewFile,BufReadPost *.arnoldc set filetype=arnoldc
autocmd BufNewFile,BufReadPost */dev/py/*/templates/*.html set filetype=htmldjango

" vim -b : edit binary using xxd-format!
augroup Binary
	autocmd!
	autocmd BufReadPre  *.bin let &bin=1
	autocmd BufReadPost *.bin if &bin | %!xxd
	autocmd BufReadPost *.bin set ft=xxd | endif
	autocmd BufWritePre *.bin if &bin | %!xxd -r
	autocmd BufWritePre *.bin endif
	autocmd BufWritePost *.bin if &bin | %!xxd
	autocmd BufWritePost *.bin set nomod | endif
augroup END

" commentary.vim
autocmd BufNewFile,BufReadPost *.phtml setlocal commentstring=<?php\ /*%s*/\ ?>
autocmd FileType cs setlocal commentstring=//\ %s
autocmd FileType sed setlocal commentstring=#\ %s

" easytags.vim
let g:easytags_file = '~/.vim/tags'
let g:easytags_async = 1

" ALE
" only run on file save and file open
let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_insert_leave = 0

" matchit.vim
source $VIMRUNTIME/macros/matchit.vim

" Vdebug
if !exists('g:vdebug_options')
	let g:vdebug_options = {}
endif
" let g:vdebug_options.path_maps = {'/remote/path': '/local/path'}

" Black
function BlackFmt()
	let view = winsaveview()
	%!black --quiet -
	call winrestview(view)
endfunction
function AutoBlackFmt()
	if exists("$BLACK_DISABLE")
		return
	endif
	if !executable('black')
		return
	endif
	call BlackFmt()
endfunction
command Black call BlackFmt()
autocmd BufWritePre *.py call AutoBlackFmt()
